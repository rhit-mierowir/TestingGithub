# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    #This matrix runs this test in all of the following versions.
    strategy:
      matrix:
        python-version: ["3.8","3.9","3.10","3.11","3.12"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{matrix.python-version}}
      uses: actions/setup-python@v5
      with:
        python-version: ${{matrix.python-version}}
    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install flake8 pytest
    #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pytest

    - name: Install pipx
      run: |
        sudo apt update
        sudo apt install pipx
        pipx ensurepath 
        sudo pipx ensurepath
          
    - name: Install poetry
      run: pipx install poetry
      
    - name: Install Testing Dependencies
      run: |
        poetry install --with gh_tests
        poetry self install --sync --group gh_tests
    
    - name: Run Short Tests
      run: |
        poetry run pytest
    
    - name: Run Long Tests
      run: |
        run pytest 
      #This only reruns the same tests, these would normally be the longer tests

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
